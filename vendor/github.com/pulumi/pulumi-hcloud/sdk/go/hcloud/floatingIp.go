// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Hetzner Cloud Floating IP to represent a publicly-accessible static IP address that can be mapped to one of your servers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		node1, err := hcloud.NewServer(ctx, "node1", &hcloud.ServerArgs{
// 			Image:      pulumi.String("debian-9"),
// 			ServerType: pulumi.String("cx11"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = hcloud.NewFloatingIp(ctx, "master", &hcloud.FloatingIpArgs{
// 			Type:     pulumi.String("ipv4"),
// 			ServerId: node1.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type FloatingIp struct {
	pulumi.CustomResourceState

	// Description of the Floating IP.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Home location (routing is optimized for that location). Optional if serverId argument is passed.
	HomeLocation pulumi.StringOutput `pulumi:"homeLocation"`
	// (string) IP Address of the Floating IP.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// (string) IPv6 subnet. (Only set if `type` is `ipv6`)
	IpNetwork pulumi.StringOutput `pulumi:"ipNetwork"`
	// User-defined labels (key-value pairs) should be created with.
	Labels pulumi.MapOutput `pulumi:"labels"`
	// Name of the Floating IP.
	Name pulumi.StringOutput `pulumi:"name"`
	// Server to assign the Floating IP to.
	ServerId pulumi.IntOutput `pulumi:"serverId"`
	// Type of the Floating IP. `ipv4` `ipv6`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFloatingIp registers a new resource with the given unique name, arguments, and options.
func NewFloatingIp(ctx *pulumi.Context,
	name string, args *FloatingIpArgs, opts ...pulumi.ResourceOption) (*FloatingIp, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &FloatingIpArgs{}
	}
	var resource FloatingIp
	err := ctx.RegisterResource("hcloud:index/floatingIp:FloatingIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFloatingIp gets an existing FloatingIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FloatingIpState, opts ...pulumi.ResourceOption) (*FloatingIp, error) {
	var resource FloatingIp
	err := ctx.ReadResource("hcloud:index/floatingIp:FloatingIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FloatingIp resources.
type floatingIpState struct {
	// Description of the Floating IP.
	Description *string `pulumi:"description"`
	// Home location (routing is optimized for that location). Optional if serverId argument is passed.
	HomeLocation *string `pulumi:"homeLocation"`
	// (string) IP Address of the Floating IP.
	IpAddress *string `pulumi:"ipAddress"`
	// (string) IPv6 subnet. (Only set if `type` is `ipv6`)
	IpNetwork *string `pulumi:"ipNetwork"`
	// User-defined labels (key-value pairs) should be created with.
	Labels map[string]interface{} `pulumi:"labels"`
	// Name of the Floating IP.
	Name *string `pulumi:"name"`
	// Server to assign the Floating IP to.
	ServerId *int `pulumi:"serverId"`
	// Type of the Floating IP. `ipv4` `ipv6`
	Type *string `pulumi:"type"`
}

type FloatingIpState struct {
	// Description of the Floating IP.
	Description pulumi.StringPtrInput
	// Home location (routing is optimized for that location). Optional if serverId argument is passed.
	HomeLocation pulumi.StringPtrInput
	// (string) IP Address of the Floating IP.
	IpAddress pulumi.StringPtrInput
	// (string) IPv6 subnet. (Only set if `type` is `ipv6`)
	IpNetwork pulumi.StringPtrInput
	// User-defined labels (key-value pairs) should be created with.
	Labels pulumi.MapInput
	// Name of the Floating IP.
	Name pulumi.StringPtrInput
	// Server to assign the Floating IP to.
	ServerId pulumi.IntPtrInput
	// Type of the Floating IP. `ipv4` `ipv6`
	Type pulumi.StringPtrInput
}

func (FloatingIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIpState)(nil)).Elem()
}

type floatingIpArgs struct {
	// Description of the Floating IP.
	Description *string `pulumi:"description"`
	// Home location (routing is optimized for that location). Optional if serverId argument is passed.
	HomeLocation *string `pulumi:"homeLocation"`
	// User-defined labels (key-value pairs) should be created with.
	Labels map[string]interface{} `pulumi:"labels"`
	// Name of the Floating IP.
	Name *string `pulumi:"name"`
	// Server to assign the Floating IP to.
	ServerId *int `pulumi:"serverId"`
	// Type of the Floating IP. `ipv4` `ipv6`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a FloatingIp resource.
type FloatingIpArgs struct {
	// Description of the Floating IP.
	Description pulumi.StringPtrInput
	// Home location (routing is optimized for that location). Optional if serverId argument is passed.
	HomeLocation pulumi.StringPtrInput
	// User-defined labels (key-value pairs) should be created with.
	Labels pulumi.MapInput
	// Name of the Floating IP.
	Name pulumi.StringPtrInput
	// Server to assign the Floating IP to.
	ServerId pulumi.IntPtrInput
	// Type of the Floating IP. `ipv4` `ipv6`
	Type pulumi.StringInput
}

func (FloatingIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*floatingIpArgs)(nil)).Elem()
}
