// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Hetzner Cloud Load Balancer to represent a Load Balancer in the Hetzner Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myserver, err := hcloud.NewServer(ctx, "myserver", &hcloud.ServerArgs{
// 			ServerType: pulumi.String("cx11"),
// 			Image:      pulumi.String("ubuntu-18.04"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = hcloud.NewLoadBalancer(ctx, "loadBalancer", &hcloud.LoadBalancerArgs{
// 			LoadBalancerType: pulumi.String("lb11"),
// 			Location:         pulumi.String("nbg1"),
// 			Targets: hcloud.LoadBalancerTargetArray{
// 				&hcloud.LoadBalancerTargetArgs{
// 					Type:     pulumi.String("server"),
// 					ServerId: myserver.ID(),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type LoadBalancer struct {
	pulumi.CustomResourceState

	// Configuration of the algorithm the Load Balancer use.
	Algorithm LoadBalancerAlgorithmOutput `pulumi:"algorithm"`
	// (string) IPv4 Address of the Load Balancer.
	Ipv4 pulumi.StringOutput `pulumi:"ipv4"`
	// (string) IPv4 Address of the Load Balancer.
	Ipv6 pulumi.StringOutput `pulumi:"ipv6"`
	// User-defined labels (key-value pairs) should be created with.
	Labels pulumi.MapOutput `pulumi:"labels"`
	// Type of the Load Balancer.
	LoadBalancerType pulumi.StringOutput `pulumi:"loadBalancerType"`
	// Location of the Load Balancer. Require when no networkZone is set.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the Load Balancer.
	Name      pulumi.StringOutput `pulumi:"name"`
	NetworkId pulumi.IntOutput    `pulumi:"networkId"`
	NetworkIp pulumi.StringOutput `pulumi:"networkIp"`
	// Network Zone of the Load Balancer. Require when no location is set.
	NetworkZone pulumi.StringOutput `pulumi:"networkZone"`
	// List of targets of the Load Balancer.
	Targets LoadBalancerTargetTypeArrayOutput `pulumi:"targets"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil || args.LoadBalancerType == nil {
		return nil, errors.New("missing required argument 'LoadBalancerType'")
	}
	if args == nil {
		args = &LoadBalancerArgs{}
	}
	var resource LoadBalancer
	err := ctx.RegisterResource("hcloud:index/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("hcloud:index/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// Configuration of the algorithm the Load Balancer use.
	Algorithm *LoadBalancerAlgorithm `pulumi:"algorithm"`
	// (string) IPv4 Address of the Load Balancer.
	Ipv4 *string `pulumi:"ipv4"`
	// (string) IPv4 Address of the Load Balancer.
	Ipv6 *string `pulumi:"ipv6"`
	// User-defined labels (key-value pairs) should be created with.
	Labels map[string]interface{} `pulumi:"labels"`
	// Type of the Load Balancer.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// Location of the Load Balancer. Require when no networkZone is set.
	Location *string `pulumi:"location"`
	// Name of the Load Balancer.
	Name      *string `pulumi:"name"`
	NetworkId *int    `pulumi:"networkId"`
	NetworkIp *string `pulumi:"networkIp"`
	// Network Zone of the Load Balancer. Require when no location is set.
	NetworkZone *string `pulumi:"networkZone"`
	// List of targets of the Load Balancer.
	Targets []LoadBalancerTargetType `pulumi:"targets"`
}

type LoadBalancerState struct {
	// Configuration of the algorithm the Load Balancer use.
	Algorithm LoadBalancerAlgorithmPtrInput
	// (string) IPv4 Address of the Load Balancer.
	Ipv4 pulumi.StringPtrInput
	// (string) IPv4 Address of the Load Balancer.
	Ipv6 pulumi.StringPtrInput
	// User-defined labels (key-value pairs) should be created with.
	Labels pulumi.MapInput
	// Type of the Load Balancer.
	LoadBalancerType pulumi.StringPtrInput
	// Location of the Load Balancer. Require when no networkZone is set.
	Location pulumi.StringPtrInput
	// Name of the Load Balancer.
	Name      pulumi.StringPtrInput
	NetworkId pulumi.IntPtrInput
	NetworkIp pulumi.StringPtrInput
	// Network Zone of the Load Balancer. Require when no location is set.
	NetworkZone pulumi.StringPtrInput
	// List of targets of the Load Balancer.
	Targets LoadBalancerTargetTypeArrayInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// Configuration of the algorithm the Load Balancer use.
	Algorithm *LoadBalancerAlgorithm `pulumi:"algorithm"`
	// User-defined labels (key-value pairs) should be created with.
	Labels map[string]interface{} `pulumi:"labels"`
	// Type of the Load Balancer.
	LoadBalancerType string `pulumi:"loadBalancerType"`
	// Location of the Load Balancer. Require when no networkZone is set.
	Location *string `pulumi:"location"`
	// Name of the Load Balancer.
	Name *string `pulumi:"name"`
	// Network Zone of the Load Balancer. Require when no location is set.
	NetworkZone *string `pulumi:"networkZone"`
	// List of targets of the Load Balancer.
	Targets []LoadBalancerTargetType `pulumi:"targets"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// Configuration of the algorithm the Load Balancer use.
	Algorithm LoadBalancerAlgorithmPtrInput
	// User-defined labels (key-value pairs) should be created with.
	Labels pulumi.MapInput
	// Type of the Load Balancer.
	LoadBalancerType pulumi.StringInput
	// Location of the Load Balancer. Require when no networkZone is set.
	Location pulumi.StringPtrInput
	// Name of the Load Balancer.
	Name pulumi.StringPtrInput
	// Network Zone of the Load Balancer. Require when no location is set.
	NetworkZone pulumi.StringPtrInput
	// List of targets of the Load Balancer.
	Targets LoadBalancerTargetTypeArrayInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}
