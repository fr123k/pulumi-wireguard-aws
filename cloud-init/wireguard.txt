#!/bin/bash -v

export DEBIAN_FRONTEND=noninteractive

# Setup ssh user
useradd -m -s /bin/bash -G sudo frank.ittermann
mkdir -p /home/frank.ittermann/.ssh/
echo "frank.ittermann ALL=(ALL) NOPASSWD:ALL" >/etc/sudoers.d/frank_ittermann
chmod 0440 /etc/sudoers.d/frank_ittermann

cp /root/.ssh/authorized_keys /home/frank.ittermann/.ssh/authorized_keys
chmod 600 /home/frank.ittermann/.ssh/authorized_keys
chown -R frank.ittermann:frank.ittermann /home/frank.ittermann

# Hardening ssh
sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config
sed -i 's|[#]*PasswordAuthentication yes|PasswordAuthentication no|g' /etc/ssh/sshd_config
sed -i -e '$aPubkeyAcceptedAlgorithms +ssh-rsa' /etc/ssh/sshd_config
sed -i -e '$aAllowUsers frank.ittermann' /etc/ssh/sshd_config

systemctl reload ssh.service

apt-get update -y
apt-get upgrade -y

# Setup fail2ban
apt-get install -y fail2ban
systemctl enable fail2ban

# Setup nginx

sudo apt-get update
sudo apt-get install -y nginx

sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot

sudo certbot certonly --nginx -d wg.fr123k.uk -m frank.ittermann@yahoo.de --agree-tos -n

cat > /etc/nginx/sites-available/router <<- EOF
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    listen 443 ssl;

    server_name wg.fr123k.uk

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location = /custom_444 {
        return 444;
    }

    # Redirect non-https traffic to https
    if (\$scheme != "https") {
        return 301 https://$host$request_uri;
    }
}
EOF

cat > /etc/nginx/sites-available/router.secret <<- EOF
server {
    listen 8443 ssl;
    # RSA certificate
    ssl_certificate /etc/letsencrypt/live/wg.fr123k.uk/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/wg.fr123k.uk/privkey.pem;
    server_name wg.fr123k.uk

    access_log /var/log/nginx/secret_access.log;
    error_log /var/log/nginx/secret_error.log;

    error_page 404 = /custom_444;

    # Everything is a 404
    location / {
        return 404;
    }

    location /secrets/ {
        proxy_pass http://127.0.0.1:8088/;
        proxy_redirect off;
        proxy_set_header Host \$http_host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Real-PORT \$remote_port;
        #allow 78.47.97.138;
        #deny all;
        # Return 444 for denied requests
        error_page 502 404 403 = /custom_444;
    }

    location / {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host \$http_host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Real-PORT \$remote_port;
        #allow 78.47.97.138;
        #deny all;
        # Return 444 for denied requests
        error_page 403 = /custom_444;
    }

    location = /custom_444 {
        return 444;
    }
}
EOF

sudo ln -s /etc/nginx/sites-available/router /etc/nginx/sites-enabled/router
sudo ln -s /etc/nginx/sites-available/router.secret /etc/nginx/sites-enabled/router.secret
sudo rm /etc/nginx/sites-enabled/default 
sudo systemctl restart nginx

# Setup wireguard
apt-get install -y wireguard wireguard-tools pwgen

umask 077
#TODO make server public key available outside the vm instance
wg genkey | tee /tmp/server_privatekey | wg pubkey > /tmp/server_publickey

MYV4IP=$(curl {{ METADATA_URL }})

cat > /etc/wireguard/wg0.conf <<- EOF
[Interface]
Address = 172.16.16.1/24
PrivateKey = $(cat /tmp/server_privatekey)
ListenPort = 51820
PostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

[Peer]
PublicKey = {{ CLIENT_PUBLICKEY }}
AllowedIPs = {{ CLIENT_IP_ADDRESS }}/32
PersistentKeepalive = 25
EOF

chown -R root:root /etc/wireguard/
chmod -R og-rwx /etc/wireguard/*
sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
sysctl -p
ufw allow http
ufw allow https
ufw allow 8443/tcp # this is to bypass wireguard firewall rule
ufw allow ssh
ufw allow 51820/udp
ufw --force enable

# enable debug logging of wireguard
echo module wireguard +p > /sys/kernel/debug/dynamic_debug/control

systemctl enable wg-quick@wg0.service
systemctl restart wg-quick@wg0.service

MAILJET_AUTH="{{ MAILJET_API_CREDENTIALS }}"

if [ "$MAILJET_AUTH" != "" ]; then

    # TODO make the list of emails configurable per client ip
    cat > /tmp/wireguard.email <<- EOF
    {
    "Messages":[
        {
        "From": {
            "Email": "wireguard@fr123k.uk",
            "Name": "Wireguard $MYV4IP"
        },
        "To": [
            {
            "Email": "fr12_k@yahoo.com",
            "Name": "Frank"
            }
        ],
        "Subject": "Wireguard publickey",
        "TextPart": "The wireguard public key is $(cat /tmp/server_publickey) and the ip address $MYV4IP",
        "CustomID": "Wireguard Publickey"
        }
    ]
    }
EOF

    curl -s -X POST \
    --user "${mailjet_api_credentials}" \
    https://api.mailjet.com/v3.1/send \
    -H 'Content-Type: application/json' \
    --data "@/tmp/wireguard.email"
fi

# Install https://github.com/ngoduykhanh/wireguard-ui

cd /tmp
wget https://github.com/fr123k/wireguard-ui/releases/download/v0.3.8/wireguard-ui-v0.3.8-linux-amd64.tar.gz
tar xvfz wireguard-ui-v0.3.8-linux-amd64.tar.gz
mv wireguard-ui /usr/local/bin/wireguard-ui
rm wireguard-ui-v0.3.8-linux-amd64.tar.gz

cat > /etc/systemd/system/wgui-restart-wg.service <<- EOF
[Unit]
Description=Restart WireGuard
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/bin/systemctl restart wg-quick@wg0.service

[Install]
RequiredBy=wgui-restart-wg.path
EOF

cat > /etc/systemd/system/wgui-restart-wg.path <<- EOF
[Unit]
Description=Watch /etc/wireguard/wg0.conf for changes

[Path]
PathModified=/etc/wireguard/wg0.conf

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/systemd/system/wgui.service <<- EOF
[Unit]
Description=Start wireguard-ui

[Service]
TimeoutStartSec=0
Restart=always
WorkingDirectory=/usr/local/bin
Environment="WGUI_PASSWORD=$(cat /tmp/user_password)"
Environment="SESSION_SECRET=hasdgjh"
ExecStart=/usr/local/bin/wireguard-ui --bind-address 127.0.0.1:8080

[Install]
WantedBy=muli-user.target
EOF

pwgen 16 1 > /tmp/user_password

mkdir -p /usr/local/bin/db/server/
cat > /usr/local/bin/db/server/users.json <<- EOF
{
    "username":"admin",
    "password":"$(cat /tmp/user_password)"
}
EOF

cat > /usr/local/bin/db/server/keypair.json <<- EOF
{
	"private_key": "$(cat /tmp/server_privatekey)",
	"public_key": "$(cat /tmp/server_publickey)",
    "updated_at":"$(date --utc +%FT%T.%3NZ)"
}
EOF
cat > /usr/local/bin/db/server/interfaces.json <<- EOF
{
	"addresses": [
		"172.16.16.1/24"
	],
	"listen_port": "51820",
	"updated_at": "$(date --utc +%FT%T.%3NZ)",
	"post_up": "iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE",
	"post_down": "iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE"
}
EOF

systemctl enable wgui-restart-wg.service
systemctl start wgui-restart-wg.service
systemctl enable wgui-restart-wg.path
systemctl start wgui-restart-wg.path
systemctl enable wgui.service
systemctl start wgui.service

# Setup secret-operator

curl -OL https://github.com/containifyci/secret-operator/releases/download/v0.2.0/secret-operator-server_linux_amd64

sudo mv secret-operator-server_linux_amd64 /usr/bin/secret-operator-server
sudo chmod +x /usr/bin/secret-operator-server

cat > /etc/systemd/system/secret-operator-server.service <<- EOF
[Unit]
Description=Secret Operator Server
After=network.target
StartLimitIntervalSec=120s
StartLimitBurst=10

[Service]
Environment="GCP_PROJECT_ID=gke-1-368016"
Environment="GOOGLE_APPLICATION_CREDENTIALS=/root/adc.json"
Environment="PORT=8088"
ExecStart=secret-operator-server
ExecStartPre=-secret-operator-server update
Restart=on-failure
RestartSec=10s

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl start secret-operator-server
sudo systemctl status secret-operator-server
